"""
Defaults module for aar_doc.

This module provides utilities for collecting the default values
of an argument_spec and writing the final defaults file.
"""

import pathlib
from os import linesep
from typing import Any

import typer
import yaml


class AARDumper(yaml.SafeDumper):
    """
    Custom Dumper to work around https://github.com/yaml/pyyaml/issues/234.
    """

    def increase_indent(  # pylint: disable=unused-argument
        self,
        *args,
        flow=False,
        **kwargs,
    ):
        return super().increase_indent(flow=flow, indentless=False)


def generate_defaults(ctx: typer.Context) -> dict[str, Any]:
    """
    Generates a dictionary from all options in the
    argument_specs with default values.The dictionary contains
    defaults from all entry points.
    """
    role_defaults = {}
    argument_spec_data = ctx.obj["data"]["argument_specs"]

    for entry_point in argument_spec_data:
        options = argument_spec_data.get(entry_point, {}).get("options")
        if not options:
            continue
        for name, spec in options.items():
            value = spec.get("default")
            if isinstance(value, str):
                value = value.strip()
            if value is not None:
                role_defaults[name] = value
    return role_defaults


def write_defaults(ctx: typer.Context, role_defaults: dict[str, Any]) -> None:
    """
    Writes the generated defaults dictionary to the given file.
    """
    output_file_param: pathlib.Path = ctx.obj["config"]["output_file"]

    if output_file_param.name == "README.md":
        output: pathlib.Path = ctx.obj["config"]["role_path"] / "defaults" / "main.yml"
    elif output_file_param.is_absolute():
        output = output_file_param
    else:
        output = ctx.obj["config"]["role_path"] / "defaults" / output_file_param
    output.resolve()

    try:
        # Create parent directories if they don't exist yet.
        # Needed if the <role_path>/defaults was not created yet.
        output.parent.mkdir(parents=True, exist_ok=True)
    except OSError as exc:
        typer.echo(
            f"Unable to create necessary directories for '{output}'. "
            "The following error occured: '{exc.strerror}'.",
        )
        raise typer.Exit(1) from exc

    try:
        with open(output, "w", encoding="utf-8") as defaults_file:
            defaults_file.writelines(
                ["---" + linesep, "# Automatically generated by aar-doc" + linesep],
            )
            yaml.dump(
                role_defaults,
                defaults_file,
                Dumper=AARDumper,
                default_style=None,
                default_flow_style=False,
                allow_unicode=True,
                sort_keys=False,
                indent=2,
                encoding="utf-8",
            )
    except OSError as exc:
        typer.echo(
            f"Unable to write the file '{output}'. The following error occured: '{exc.strerror}'",
        )
        raise typer.Exit(1) from exc
